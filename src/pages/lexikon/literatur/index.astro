---
import { createUrl, createUrlSearchParams, request } from "@acdh-oeaw/lib";
import * as v from "valibot";

import LexiconAlphabetLinks from "@/components/lexicon-alphabet-links.astro";
import { defaultLocale, type Locale } from "@/config/i18n.config";
import LexiconLayout from "@/layouts/lexicon-layout.astro";
import PageLayout from "@/layouts/page-layout.astro";
import { ensureArray } from "@/lib/ensure-array";
import { createI18n } from "@/lib/i18n";
import { createCollectionResource } from "@/lib/keystatic/resources";
import { baseUrl, type BibliographySearchResult } from "@/lib/lexicon";

export const prerender = false;

const locale = (Astro.currentLocale ?? defaultLocale) as Locale;
const { t } = await createI18n(locale);

const page = await createCollectionResource("pages", locale).read("lexikon/literatur");

const { title, image, content } = page.data;
const documentTitle = title;
const { default: Content } = await page.compile(content);

const schema = v.object({
	letter: v.fallback(v.optional(v.pipe(v.string(), v.regex(/\w/), v.toLowerCase()), "a"), "a"),
	start: v.fallback(v.optional(v.pipe(v.unknown(), v.transform(Number), v.number()), 1), 1),
});
const { letter, start } = v.parse(schema, {
	letter: Astro.url.searchParams.get("letter"),
	start: Astro.url.searchParams.get("start"),
});

async function api(): Promise<
	{ data: BibliographySearchResult; error: null } | { data: null; error: string }
> {
	const url = createUrl({
		baseUrl,
		pathname: "/literature",
		searchParams: createUrlSearchParams({ title: letter, startAt: start, max: 500 }),
	});

	try {
		const data = (await request(url, { responseType: "json" })) as BibliographySearchResult;
		return { data, error: null };
	} catch {
		return { data: null, error: t("SearchResults.error") };
	}
}

const { data, error } = await api();
---

<PageLayout locale={locale} title={documentTitle}>
	<LexiconLayout image={image} title={title}>
		<div class="prose">
			<Content />
		</div>

		<LexiconAlphabetLinks current={letter} />

		{
			error == null ? (
				Number(data.results.total) !== 0 ? (
					<div class="grid gap-y-4">
						<h2>{t("SearchResults.search-results", { count: data.results.total })}</h2>
						<ul class="grid gap-y-4" role="list">
							{ensureArray(data.results.item).map((item) => {
								const { full } = item;

								return (
									<li>
										<article class="grid gap-y-2">
											<h3>{full.bibl["#text"]}</h3>
										</article>
									</li>
								);
							})}
						</ul>
					</div>
				) : (
					<div>{t("SearchResults.nothing-found")}</div>
				)
			) : (
				<div>{error}</div>
			)
		}
	</LexiconLayout>
</PageLayout>
