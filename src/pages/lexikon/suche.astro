---
import { createUrl, createUrlSearchParams, log, request } from "@acdh-oeaw/lib";
import * as v from "valibot";

import LexiconSearchForm from "@/components/lexicon-search-form.astro";
import { defaultLocale, type Locale } from "@/config/i18n.config";
import LexiconLayout from "@/layouts/lexicon-layout.astro";
import PageLayout from "@/layouts/page-layout.astro";
import { processMdx } from "@/lib/content/mdx";
import { reader } from "@/lib/content/reader";
import { ensureArray } from "@/lib/ensure-array";
import { createI18n } from "@/lib/i18n";
import { baseUrl, pathnames, type SearchResponse } from "@/lib/lexicon";

export const prerender = false;

const locale = (Astro.currentLocale ?? defaultLocale) as Locale;
const { t } = await createI18n(locale);

const page = await reader().collections.pages.readOrThrow("lexikon/suche");

const documentTitle = page.title;
const { title } = page;
const { default: Content } = await processMdx(await page.content(), locale);

const schema = v.object({
	q: v.fallback(v.optional(v.string(), ""), ""),
	field: v.fallback(v.optional(v.picklist(["title", "all"]), "title"), "title"),
	start: v.fallback(v.optional(v.pipe(v.unknown(), v.transform(Number), v.number()), 1), 1),
});
const { q, field, start } = v.parse(schema, {
	q: Astro.url.searchParams.get("q"),
	field: Astro.url.searchParams.get("field"),
	start: Astro.url.searchParams.get("start"),
});

async function api(): Promise<
	{ data: null; error: string } | { data: SearchResponse; error: null }
> {
	/** Endpoint does not accept empty search term. */
	if (q.length === 0) return { data: null, error: t("SearchResults.empty-query") };

	const url = createUrl({
		baseUrl,
		pathname: "/query",
		searchParams: createUrlSearchParams({ q, field, startAt: start, max: 500 }),
	});

	try {
		const data = (await request(url, { responseType: "json" })) as SearchResponse;
		return { data, error: null };
	} catch (error) {
		log.error(error);
		return { data: null, error: t("SearchResults.error") };
	}
}

const { data, error } = await api();
---

<PageLayout locale={locale} title={documentTitle}>
	<LexiconLayout title={title}>
		<div class="prose">
			<Content />
		</div>

		<LexiconSearchForm q={q} field={field} />

		{
			error == null ? (
				Number(data.results.total) !== 0 ? (
					<div class="grid gap-y-4">
						<h2>{t("SearchResults.search-results", { count: data.results.total })}</h2>
						<ul class="grid gap-y-4" role="list">
							{ensureArray(data.results.article).map((article) => {
								const { id, title, categories, kwic } = article;

								return (
									<li>
										<article class="grid gap-y-2">
											<h3>
												<a class="underline" href={`${pathnames[categories.term]}${id}`}>
													{title}
												</a>
											</h3>
											<div class="text-neutral-600">
												{ensureArray(kwic.p).map((hit) => {
													return (
														<div>
															<span>{hit.span[0]["#text"]}</span>
															<mark class="bg-transparent font-medium">{hit.span[1]["#text"]}</mark>
															<span>{hit.span[2]["#text"]}</span>
														</div>
													);
												})}
											</div>
										</article>
									</li>
								);
							})}
						</ul>
					</div>
				) : (
					<div>{t("SearchResults.nothing-found")}</div>
				)
			) : (
				<div>{error}</div>
			)
		}
	</LexiconLayout>
</PageLayout>
